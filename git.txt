完全学会Git的24课堂
1、初始化文档库
cd /d/exergit/
git init

2、配置相关信息
git config -l          ---查看所有配置  --list
git config --system -l
git config  --global -l
git config user.name 'yipeng'
git config user.email 'yipengchen1@163.com'
git config --system user.name 'yipeng'
git config --unset user.name  'yipeng'
git config alias.con 'config -l'   表示config -l 的别名是con
git config --global core.editor notepad   

--global 表示home directory中的.gitconfig配置文件
--system 表示git程序文件夹中的etc\config配置文件
不带参数表示当前工作目录中的配置文件

3、提交文件
git add 1.txt
git status  --- 查看状态
git commit -m '描述、说明信息'  --author='操作者名  <Email邮箱>'
git commit --amend  -m '新的描述'    ---commit指令后修改描述

git add .     ---有个点！  会把新增的文件和被修改的文件加入Git 索引，被删除的文件不会记录在Git中。 
git add -u   把被修改的文件和被删除的文件加入Git索引。
git add -A  把新增的文件、被修改的文件以及被删除的文件全部加入Git索引。

4、图形界面
gitk
gitk all

5、建立分支
git branch  分支名  
git checkout 分支名    --- 切换分支
git checkout -b newbranchname     --创建一个新分支并切换到新分支

合并新分支后并删除新分支
git checkout dev
git merge --no-ff newbranchname
git branch -d newbranchname

强制删除新分支
git checkout dev
git branch -D newbranchname

排除不需要加入的文档库
touch .gitignore
在其中加入
.gitignore
folder


网上学习

安装
安装完后设置用户及邮箱
git config --global user.name 'yipeng'
git config --global user.email 'yipengchen1@163.com'

创建版本库
mkdir learngit
cd learngit
pwd
git init
ls -ah

文件添加到版本库(提交新文件)
git add 1.txt
git commit -m 'shuoming xinxi'

查看状态
git status

查看文件变化
git diff 1.txt   

查看历史记录
git log

图形方式查看历史状态
git log -5 --graph --stat



回退
HEAD表示当前版本，上一个版本HEAD^ 上上一个版本HEAD^^
上4个版本HEAD~4
git reset --hard HEAD^    ---- 回退到上一个版本 
git reset --hard 2ada1e5  ---- 回退到 2ada1e5 这个版本  先用 git reflog 查看操作记录，然后可以选择相关版本

回退后反悔，又回到之前没有回退时
git reset --hard 58abdbe    --(58abdbe 之前的版本号)
git reflog用来记录你的每一次命令，可以找到版本号

git
总结：
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，
使用命令git reset --hard commit_id。
git reset <commit> 的意思就是 把HEAD移到<commit>
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

Git的版本库里存了很多东西，其中最重要的就是称为（或者叫index）的暂存区
前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。

用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别：

git checkout -- file    可以丢弃工作区的修改：
git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令
用命令git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区
git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。

文件回退总结：
库文件回退：    git reset  --hard 58abdbe    --(58abdbe 之前的版本号)   --- 可先查看需要退回的版本  git reflog filename
暂存区回退：    git reset head filename
工作区回退：    git checkout filename

删除文件
实际删除文件： rm 3.txt
版本库中再做删除操作
git rm 3.txt
git commit -m 'shuoming'

把误删除的找回
git checkout -- 3.txt

如果也从版本库中删除了，需要找回
git reset --hard HEAD^

***********************************远程库操作************************
远程库操作
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

用命令git clone克隆一个本地库
git clone git@github.com:kevinyp/ypgit2

创建分支
git checkout -b branch1    
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
git branch branch1
git checkout branch1

用git branch命令查看当前分支：

git merge命令用于合并指定分支到当前分支  
把dev分支的工作成果合并到master分支上：
git merge dev

rebase 和merge一样可以合并文件，不过它会消除分支
git checkout dev
git rebase master  --- dev原来的分支节点消失，从master新的节点长出分支，最终只存在
一条主线。 

删除dev分支
git branch -d dev

小结
Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>


git status也可以告诉我们冲突的文件：
Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
用git log --graph命令可以看到分支合并图。
用git log看看分支历史

合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward
git merge --no-ff -m 'merge with no-ff' dev

分支策略
在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了

Git分支十分强大，在团队开发中应该充分应用。
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，
而fast forward合并就看不出来曾经做过合并。

Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
用git stash list命令查看“储藏”的工作现场。
需要恢复一下，有两个办法：
一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
另一种方式是用git stash pop，恢复的同时把stash内容也删了：

可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
git stash apply stash@{0}

如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

查看远程分支
用git remote -v显示更详细的信息 ,  或者  git remote  

推送分支
git push origin master
git push origin dev

使用强制push的方法：
$ git push -u origin master -f 

我们可以删除已有的GitHub远程库：
git remote rm origin


------远程库的关联、查看、删除 --------------
一.当推送到服务器时首先要添加远程地址的  
git remote add origin https://gitee.com/kingCould/HelloWord.git
二.查看本地添加了哪些远程地址
$ git remote -v
origin https://github.com/zhidao/crm.git (fetch)
origin https://github.com/zhidao/crm.git (push)
sdorigin https://github.com/zhidao/erp.git (fetch)
sdorigin https://github.com/zhidao/erp.git (push)
三.删除本地指定的远程地址
git remote remove origin 删除即可



让Git显示颜色，会让命令输出看起来更醒目
git config --global color.ui true

设置别名
$ git config --global alias.st status
$ git config --global alias.co checkout
$ git config --global alias.ci commit
$ git config --global alias.br branch

github上的文件和本地不一致的解决方法：  我的步骤通常是这样
git push    如果失败的话，说明网络上的版本已经更改过了，那就
git pull     如果失败的话，说明网络的版本和本地的版本在合并时可能产生冲突，那就
git stash(把本地的修改全部缓存起来)    然后再   git pull
然后再   git stash pop(把缓存起来的修改恢复)
然后如果有冲突解决冲突，没有就   git push

在github上只能删除仓库,却无法删除文件夹或文件, 所以只能通过命令来解决
首先进入你的master文件夹下, Git Bash Here ,打开命令窗口
$ git --help                                      # 帮助命令
$ git pull origin master                    # 将远程仓库里面的项目拉下来
$ dir                                                # 查看有哪些文件夹
$ git rm -r --cached target              # 删除target文件夹
$ git commit -m '删除了target'        # 提交,添加操作说明
$ git push -u origin master               # 将本次更改更新到github项目上去


windows 下git服务器安装(Gitblit)
0、先需要安装jdk
1、下载Gitblit，下载地址：http://www.gitblit.com/
2、解压缩下载的压缩包即可，无需安装。我的路径为E:\Program Files\gitblit-1.8.0   C:\APP\gitblit-1.8.0
3、转到.\gitblit-1.8.0\data目录，需要修改配置文件    配置gitblit的 defaults.properties
    打开defaults.properties分别搜索替换以下信息(参数说明)：
    server.httpPort = 8888    （http协议的端口 ，请改为自己的端口）
    server.httpsPort = 8443  （https 协议的端口 ，请改为自己的端口）
    server.httpBindInterface = localhost（http协议下服务器端访问的网址 ip，请改为自己的ip）
    server.httpsBindInterface = localhost（https协议下服务器端访问的网址 ip，请改为自己的ip）
    git.repositoriesFolder = ${baseFolder}/git （${baseFolder}/git是其默认目录，也可以替换为自己指定的文件目录）
4、修改installService.cmd找到installService.cmd文件。用“记事本”打开。修改ARCH，32位系统：SET ARCH=x86；64位系 统：SET ARCH=amd64。添加CD为程序目录 SET CD=D:\Git\Gitblit-1.6.0(你的实际目录)。修改StartParams里的启动参数，给空就可以了。
实际要用SET ARCH=x86   设为amd64服务会有问题！！！
5、右键以管理员身份运行installService.cmd 。 
6、在浏览器中打开http://localhost:8888/，成功登陆Gitblit服务器
默认管理员账号密码是admin admin，可以使用默认账号密码登录，然后改密即可。admin/123456  admin/gitadmin

浏览器访问远程库地址：  http://172.168.1.237:8888/repositories/TestGitblit
                                     http://172.168.1.237:8888/repositories/TestGitblit
git clone http://admin@172.168.1.237:8888/r/reborn.git

git remote add origin http://admin@172.168.1.237:8888/r/TestGitblit.git   --建立远程库到本地库的关联
git push -u origin master     --将本地文档推送到远程库

------------配置-----------
@REM arch = x86, amd64, or ia32
SET ARCH=x86
SET CD=C:\APP\gitblit-1.8.0

@REM Be careful not to introduce trailing whitespace after the ^ characters.
@REM Use ; or # to separate values in the --StartParams parameter.
"%CD%\%ARCH%\gitblit.exe"  //IS//gitblit ^
		 --DisplayName="gitblit" ^
		 --Description="a pure Java Git solution" ^
		 --Startup=auto ^
		 --LogPath="%CD%\logs" ^
		 --LogLevel=INFO ^
		 --LogPrefix=gitblit ^
		 --StdOutput=auto ^
		 --StdError=auto ^
		 --StartPath="%CD%" ^
		 --StartClass=org.moxie.MxLauncher ^
		 --StartMethod=main ^
		 --StartParams="" ^
		 --StartMode=jvm ^
		 --StopPath="%CD%" ^
		 --StopClass=org.moxie.MxLauncher ^
		 --StopMethod=main ^
		 --StopParams="--stop;--baseFolder;%CD%\data" ^
		 --StopMode=jvm ^
		 --Classpath="%CD%\gitblit.jar" ^
		 --Jvm=auto ^
		 --JvmMx=1024




-- good git websit
https://www.jianshu.com/p/c8cf9a9b0270
http://git.oschina.net/progit/
https://gitee.com/kevinyp001/events
《Git 学习指南》
Git内容总结
帮助：git commit -h    --查看commit命令的帮助
一：常用操作
A、查询信息类命令
git status
git log --显示提交历史
git log -n 3
git log --oneline   --仅显示一行
git log --stat      --显示统计信息
git log --graph
git log --walk-reflog  mybranch  --显示分支本地历史记录
git reflog   用来记录你的每一次命令，可以找到版本号
git branch -r  --显示远程跟踪分支
git branch -av   ---显示分支详细信息
git remote -v
git show
git diff master origin2/master   --提取前科比较远程库和本地库
git log --oneline master..origin2/master
git tag -l
git config -l --查看配置，可以查看别名
git config --global --list
git diff origin2/master master  --查看版本对比
git diff Head -- filename  --查看工作区和版本库里最新版本的区别


B、提交、提取文件类命令
文件提交到本地库
1、git add 1.txt
   git add .
2、git commit -m "commnet"     -- 好像单引号、双引号都可以
   git commit -m '描述、说明信息'  --author='操作者名  <Email邮箱>'
   git commit --amend  -m '新的描述'    ---commit指令后修改描述
3、为当前版本指定标签
   git tag release3.1 master -m 'relase version'

文件提交到远程库
1、git push -u  origin(远程库) master(本地库)    -- 把本地库的master分支同步到远程仓库。加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
git push origin(远程库) master(本地库)
git push release3.1

push 命令只适合把文件传到不带工作区的共享版本库中(裸版本库)，建立裸版本库的方法是clone时
用--bare选项,例如：
git clone --bare /fist-steps  /first-steps-bare
上传操作：git push /first-steps-bare master
 
2、提取文件到本地工作区
git fetch /first-steps-bare   --fetch:获取提交,会将其他库所有分支中尚未存在于本地库中的提交获取到。
fetch是单向操作，提交只能从远程库传送到本地库，如果将本地库提交到远程库要用push命令。
提取前可比较远程库和本地库
git diff master origin2/master
利用本地分支操作别处版本库：通过获取(fetch)操作来创建一个本地分支orig2tolocal。
git fetch origin2 master:orig2tolocal
获取最新文件到工作区/本地  pull = fetch + merge
git pull  --会从默认版本库中提取回文件，也可用下述/first-steps-bare(源库名)指定任意版本库的路径。
git pull /first-steps-bare master 
git pull --rebase   --会将从远程库获取的版本合并到本地后并消除钻石链
git pull origin2 master(源):orig2tolocal(目标) 

push、与pull fetch的区别
push 通常不会带来合并，且只对有相同分支名的才提交文件，只在快进模式下被允许，pull、fetch所选取的是所有分支，且会合并。


C、恢复到指定版本命令
git中，恢复文件到某一版本通常称为检出(checkout)操作。
1、git checkout  1.txt
2、git checkout releas3.1  获取通过标记提交的版本releas3.1 
3、git checkout -m 版本号 文件/文件夹

文件恢复(回退)总结：
reset 重置暂存区
git reset Head .  --重置暂存区为当前head版本  第二个参数为当前的目录或文件
库文件回退：git reset  --hard 58abdbe    --(58abdbe 之前的版本号)   --- 可先查看需要退回的版本  git reflog filename
git reset --hard HEAD  --hard参数确保暂存区和工作区所发生的全部修改都会被丢弃。Head表示当前分支必须
是最后一个已关闭的提交。
暂存区回退：    git reset head filename
工作区回退：    git checkout filename


D、分支类操作
git branch                --查看分支
git branch a-branch       --创建分支 为当前提交创建分支
git checkout a-branch     --切换分支
git checkout -b b-branch  --创建并切换分支
git branch -d c-branch    --删除分支
git merge b-branch        -- 合并branch_name 到当前分支  快进合并
git merge --no-ff b-branch
git merge b-branch --no-ff --no-commit  --防止快进操作，防止可能失败的测试而停止任何提交。
git checkout --force b-branch
git reset --hard 39ea21a   --重置分支指针到39ea21a 
git push origin1 :b-branch   --删除远程库origin1中的分支b-branch！！！
git branch 不带参数：列出本地已经存在的分支，并且在当前分支的前面加“*”号标记，例如： 
git branch -r 列出远程分支，例如： 
git branch -a 列出本地分支和远程分支。 
git branch branchname  创建分支 
git checkout branchname 切换分支

Git里面，git checkout命令用于切换分支或恢复工作树文件。git checkout是git最常用的命令之一，
同时也是一个很危险的命令，因为这条命令会重写工作区。
创建一个hotfix分支
git checkout -b|-B <new_branch> [<start point>] 
git checkout -b hotfix-1.2.1 master

git checkout 26a2e80 # 26a2e80 是一个commit号，这个命令会把index区域和工作区域的内容都更新
git checkout -- README # README是想恢复的文件名，恢复成index区域里面的内容，为什么要加“--”呢，这个是为了告诉Git，
这是一个文件而不是一个分支
Git checkout . # 从index区域恢复所有文件



二：高级操作
1、变基础操作
假设目前在分支 a-branch 上
git merge master    --- 将指定的master分支的内容合并到当前的a-branch分支上！！！
git rebase master   --变基操作，指定要将活动分支上的最新修改纳入哪一个分支(这里将最新修改纳入到master分支)
如果有冲突，解决冲突后继续执行（编辑冲突文件后，git add filename ，然后git rebase --continue）
git rebase --continue  --也可执行abort skip等选项  
git mergetool

2、移植操作
假设目前在分支 feature-a 上
git rebase master --onto release1   --将原分支master上分岔出的新分支(feature-a)的提交移植到另一个分支release1上
这里，rebase命令的第一个参数所指定的是原分支(即这里的master分支)。然后，git会去确认活动分支(feature-a)上所有不属于原分支的所有
提，然后通过 --onto选项将这些提交拷贝到指定位置上(即这里的release1)。
详细步骤：
a: 切换到待移动的分支上
    git checkout feature-a
b: 确定原位置
    git会将所有不属于原分支中的提交移出来。
c: 检查所要移动的内容
    git log master..feature-a  (显示的是在feature-a上而不在master上的提交)
d: 执行变基操作
    git rebase master --onto release1   (git rebase origin  --onto target )


3、命令别名
git config --global alias.st status
git config --global alias.ci commit
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.pl  pull --rebase
git config --global alias.lg "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %C(bold blue)%s%Creset %Cgreen(%cr) <%an>%Creset' --abbrev-commit --date=relative"
git config --global alias.lga "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %C(bold blue)%s%Creset %Cgreen(%cr) <%an>%Creset' --abbrev-commit --date=relative --author xujun"
git config --global alias.last "log -1"

git config 文件的存放位置主要有三个位置
1）./etc/gitconfig 文件：包含了适用于系统所有用户和所有库的值。如果你传递参数选项’–system’ 给 git config，它将明确的读和写这个文件。
git config --system user.name "xujun"  
git config --system user.email “gdutxiaoxu@163.com"
2）~/.gitconfig 文件 ：具体到你的用户。你可以通过传递 –global 选项使 Git 读或写这个特定的文件。
git config --global user.name "xujun"  
git config --global user.email “gdutxiaoxu@163.com"
3) 位于 git 目录的 config 文件 (也就是 .git/config) ：无论你当前在用的库是什么，特定指向该单一的库。每个级别重写前一个级别的值。因此，在.git/config中的值覆盖了在/etc/gitconfig中的同一个值。

删除远端服务器上文件，保留本地文件
git rm -r --cached some-directory
git commit -m 'Remove the now ignored directory "some-directory"'
git push origin master

Git pull 拉取远程内容强制覆盖本地文件
git fetch --all
git reset --hard origin/master
git pull
git pull origin master:dev   --- 将远程库上master分支的内容拉到本地dev分支中，如果拒绝可强制下拉 git pull -f origin master:dev
git push origin :dev   --删除远程版本库中的dev分支




冲突解读
<<<<<<<(七个小于号)和=======(七个等号) 之间的内容是当前分支所更改的内容
>>>>>>>(七个大于号)和=======(七个等号) 之间的内容是外部分支的内容。

分支命令
1. git branch                         --- 显示本地分支列表
2. git branch   <branchname >                       --- 基于当前头指针创建分支
3. git branch   <branchname >  <start-pint>  --- 基于当提交指针创建分支
4. git branch   -d  <branchname >                 --- 删除分支，没合并到其它分支时拒绝删除
5. git branch   -D  <branchname >                 --- 强制删除分支 
6. git branch   -m  <oldbranch>  <newbranch>  --- 重命名分支
7. git branch   -M  <oldbranch>  <newbranch>  --- 重命名分支
8. git push origin :br  (origin 后面有空格)   ----git 删除远程分支
9. git remote prune orig    ----- 删除掉不存在的远程库分支信息
10. git checkout branchname      ---切换分支
11. git checkout -b  <branchname>  <start-pint>      ---创建并切换分支   
12. 合并分支到主线
git checkout master
git merge branch1     ---将分支branch1 合并到master

删除掉不存在的远程库分支信息
git remote prune orig

在本地建立远程库上的分支
git pull orig dev:dev
git show-ref   --查看全部本地引用

或显式的从远程分支建立本地分支
git checkout -b dev orig/dev    --- 从远程orig/dev 分支建立本地dev分支
git remote rename  orig  orignew
git remote rm orig

在远程库上建立分支
git push orig  new_branch    --即通过将本地分支推送到远程库的方式在远程库建立分支

git branch --set-upstream-to=origin/remote_branch  your_branch
其中，origin/remote_branch是你本地分支对应的远程分支；your_branch是你当前的本地分支。


理解gitfetch,关键是理解FETCH_HEAD，FETCH_HEAD指的是：某个branch在服务器上的最新状态。
一般来说，存在2种情况：
如果没有显示地指定远程分支，则远程分支的master将作为默认的FETCH_HEAD。
如：git fetch origin 或者 git fetch origin master
如果指定了远程分支，则将这个远程分支作为FETCG_HEAD。
如：git fetch origin dev 设定当前分支的FETCG_HEAD为远程服务器的dev分支。
它就相当于git pull origin dev的第一步，并不会在本地创建新的分支。另外git fetch origin dev这个命令可以用来测试远程分支dev是否存在。

git fetch origin dev :branch1          （git fetch  远程库别名  远程库分支名:本地库分支名    如果本地分支不存在则创建，否则更新本地分支）
pull 命令也类似  git pull  origin dev(远程版本库分支) :branch1(本地分支)  
1.首先执行上面的fetch操作
2.使用远程dev分支在本地创建branch1分支（但不会切换到该分支）
3.如果本地不存在branch1分支，则会自动创建一个新的branch1分支，如果存在branch1分支，并且是fast forward，
则会自动合并这2个分支，否则会阻止以上的操作。
 
git reflog show master  --- 查看日志   可挽救错误的重置

分支分为:
      本地分支、远程跟踪分支(远程版本库短名称/远程版本库分支   构成)


git add 的几种参数区别： 
git add -A 保存所有的修改 
git add . 保存新的添加和修改，但是不包括删除 
git add -u 保存修改和删除，但是不包括新建文件。 


reset命令  (重置命令     改变本分支游标，即改变头指针的引用文件)
重置命令一个用途就是修改引用(如master)的游标指向。重置一般是针对暂存区(index区)，有两种用法：
git reset <commit>  -- paths       --- 用指定提交commit 下的文件paths 替换暂存区文件，相当于取消之前的  git add <paths>
git reset --hard  <commit>   ---有不同的选项，可对暂存区或工作区进行重置。[--soft | --mixed | --hard | --merge | --keep]
 --hard 更改head的引用，替换暂存区，替换工作区。
 --soft  只更改head的引用指向，不替换暂存区和工作区。
 --mixed  默认值，更改head的引用和暂存区。

checkout命令   (检出命令   改变分支，即改变头指针)
检出命令，会修改工作区，有三种用法：
git chekcout  <commit> -- pahts    ----用于指定版本的文件覆盖工作区中的对应文件，省略commit，则用暂存区文件进行覆盖工作区文件。
git chekcout  <branch>             ---- 主要用于切换分支，当不是branch而是一个文件引用时，会进入到“头指针分离状态”。
git chekcout -b <newbranch> <start_pint>  ----用于创建和切换分支。

rebase 命令
它的作用简要概括为：可以对某一段线性提交历史进行编辑、删除、复制、粘贴；
1.合并多个commit为一个完整commit。如把 A B C D 提交合并为 A  B'
 git rebase -i  [startpoint]  [endpoint]       其中-i的意思是--interactive，即弹出交互式的界面让用户编辑完成合并操作，[startpoint] [endpoint]
                                                               则指定了一个编辑区间，如果不指定[endpoint]，则该区间的终点默认是当前分支HEAD所指向
                                                               的commit(注：该区间指定的是一个前开后闭的区间)。
git rebase -i B    ---然后进行编辑 修改弹出文件的内容即可。

2.将某一段commit粘贴到另一个分支上。如有两个分支  A B C D E F(dev)，A G(master),希望  master合并部分dev分支内容。A G C' D' E'
希望将develop分支中的C~E部分复制到master分支中，这时我们就可以通过rebase命令来实现（如果只是复制某一两个提交到其他分支，建议
使用更简单的命令:git cherry-pick）。 
git rebase   --onto  [branchName]   [startpoint]   [endpoint]  
git  rebase   C^   D   --onto master    
-----注:因为[startpoint] [endpoint]指定的是一个前开后闭的区间，为了让这个区间包含C提交，我们将区间起始点向后退了一步。 rebase是一个开闭集！
当前HEAD处于游离状态，虽然此时HEAD所指向的内容正是我们所需要的，但是master分支是没有任何变化的，git只是将C~D部分
的提交内容复制一份粘贴到了master所指向的提交后面，我们需要做的就是将master所指向的提交id设置为当前HEAD所指向的提交id就可以了，即:
git checkout master
git reset --hard  8c3110f          ------ 8c3110f     指针游离态的文件编号

日常提交代码的过程中，我想我用到频率最高的命令之一就是git pull --rebase, 很多人都知道，默认情况下，git pull就相当于执行了如下命令：
git fetch
git merge FETCH_HEAD
而git pull --rebase:
git fetch
git rebase FETCH_HEAD

rebase   通常我使用rebase最多的方式基本就是这样：
git rebase [<upsteram>] [<branch>]

命令：
git rebase [-i | --interactive] [<options>] [--exec <cmd>] [--onto <newbase>] [<upstream> [<branch>]] 
git rebase [-i | --interactive] [<options>] [--exec <cmd>] [--onto <newbase>] --root [<branch>] 
git rebase --continue | --skip | --abort | --quit | --edit-todo | --show-current-patch

git rebase命令主要参数解析：
--onto<newbase>:    newbase指的是需要rebase代码的起点，newbase可以是分支（branch），也可以是任意的提交
                                  记录(commit1)。rebase成功后，将以newbase为代码分支起点。
<upstream>:  需要与newbase比对的分支或提交记录。
<branch>： 需要rebase的工作分支。默认为HEAD，例如dev1
--continue  当处理完冲突后，可以使用该命令让rebase继续。
--abort  终止rebase操作，将HEAD设置为rebase之前的分支。如果指定了<branch>，则HEAD将重置为<branch>。
             否则，HEAD将被重置为rebase之前的分支。
--quit   终止rebase操作，但不会将HEAD重置为原来的分支。index和working tree将不会发生任何改变。
--autostash   在rebase操作之前自动stash当前分支未提交的代码，在rebase操作结束后，自动将stash的记录进行unstash，
                    并与rebase后的代码合并。注意，此操作有可能会导致严重的冲突（conflict），谨慎使用。
-m
--merge   进行rebase操作的时候，同时使用merge进行代码合并。需要注意的是，在进行rebase merge产生冲突的时候，ours
                为<upstream>指定的分支，theirs为<branch>指定的分支。原因是，rebase merge work的工作原理为，将<branch>
                上的所有提交记录在<upstream> 分支上进行重提交。

git rebase用于把一个分支的修改合并到当前分支。 
假设你现在基于远程分支”origin”，创建一个叫”mywork”的分支  ： $ git checkout -b mywork origin 
假设远程分支”origin”已经有了2个提交：C1  C2
我们本地做了两次提交 C5  C6，远程分支有人做了两次提交C3 C4，这样远程：C1 C2 C3 C4  本地：C1 C2 C5 C6
可以用pull命令把orign分支上的修改拉下来并且和本地的修改合并；也可让mywork分支历史看起来像没有经过任何合并一样，用git rebase:
git checkout mywork
git rebase origin       
这些命令会把你的”mywork”分支里的每个提交(commit)取消掉，并且把它们临时 保存为补丁(patch)(这些补丁放到”.git/rebase”目录中),
然后把”mywork”分支更新 为最新的”origin”分支，最后把保存的这些补丁应用到”mywork”分支上。 最后形成 C1 C2 C3 C4  C5 C6

   

-------- Git 总结2 ------------
重要的命令： diff、reset、checkout、reflog、branch、merge、fetch、pull、push、cherry-pick、rebase、、、、、

git diff 命令的三种比较
1、git diff                        ----- 比较暂存区和工作区的文件内容     显示信息，暂存区在前，工作区在后
2、git diff --cached         ----- 比较head和暂存区的文件内容
3、git diff head               ----- 比较head和工作区的文件内容


git reset  重置命令    -----可将工作区、暂存区、版本库回退到任一提交。一般情况下主要用于重置暂存区。 该命令一个用途是修改引用的游标指向。
用法一：git reset [-q] [<commit>] [--] <paths>...         ----- 用指定提交替换暂存区中的文件，不会重置引用，更不会改变工作区。
用法二：git reset [--soft | --mixed | --hard | --merge | ---keep ] [-q] [<commit>]   ---会重置引用，且根据不同选项可以对暂存区和工作区进行重置。

git reset --soft   <commit>    ---- 即只更改引用的指向，不改变暂存区和工作区。
git reset --mixed  <commit>    ---- 默认选项，可省略mixed，可更改引用的指向以及重置暂存区。git reset   ---- 仅用head指向的目录树重置暂存区
git reset --hard <commit>    ---改变引用、暂存区和工作区。

git reflog  可以用于挽救上述错误的重置，它的日志显示顺序是最新的在最上面！直接查看日志 最新的提交在最下面！！！
git reset --hard head^   重置到前一个版本
git reflog show master | head -5
git reset --hard master@{2}  重置到重置前的版本---挽救错误的重置


git  checkout 命令    修改head本身的指向！ 上述reset主要用途之一是修改引用(引用分支)的游标指向，即修改游标内容的指向。checkout是修改游标。
1、用法一：git checkout [-q]  [<commit>] [--] <paths>...    
2、用法二：git checkout [<branch>]
3、用法三：git checkout [-m ] [[ -b | --orphan] <new_branch> ] [<start_point> ]
1、中commit是可选的，省略相当于从暂存区进行检出。用指定的文件覆盖工作区中对应的文件。
2、会改变head头指针，主要用作切换到分支。
3、主要用作创建和切换到新的分支，新的分支从start_point指定的提交点开始创建。
git checkout                      -----汇总显示工作区、暂存区与head的差异。
git checkout HEAD            -----同上，注意,HEAD 是大写！！！
git checkout -- filename    -----维持HEAD的指向不变。用branch所指向的提交中的filename替换暂存区和工作区中相应的文件。
git checkout --  .                -----很危险，会取消所有本地工作区修改，相当于用暂存区的所有文件覆盖本地工作区文件。


git cherry-pick   拣选指令：从众多的提交中拣选出一个提交应用在当前的工作分支中。该命令需要一个提交id。
git cherry-pick 23d9422     ----将分支2上的某一次提交23d9422  合并到当前分支上。
git cherry-pick C3 C4 C7    ----将三个不同分支上的提交C3、C4、C7 h合并到当前分支上。
git cherry-pick  -n  C3 C4 C7
-n  参数    ------如果不想git cherry-pick自动进行提交，则加参数-n即可。
-e  参数     ------如果想要在cherr-pick后重新编辑提交信息，则使用git cherry-pick -e命令
git cherry-pick    –continue, –abort，–quit

gti cherry-pick 命令：常见两个用途
1、git cherry-pick 命令通常用于把版本库中一个分支的特定提交引入到一个不同分支中(当前分支)。常见用法是把开发分支
的提交移植到维护的分支中。
git checkout rel_2.3       ----- rel_2.3 ： 维护分支  dev：维护分支   dev~2： 维护分支的前2个版本
git cherryp-pick dev~1

2、cherry-pick 另一常见用途是重建一些列提交，通过从一个分支选一批提交，然后把它们引入到一个新分支。
假设在my-dev分支上有一些列提交，想把它引入到master分支，但是以不同的顺序引入：
假设 master分支  A B C D
假设 my_dev分支 A B V W X Y Z
git checkout master
git cherry-pick my_dev^      # Y
git cherry-pick my_dev~3    # W
git cherry-pick my_dev~2    # X
git cherry-pick my_dev        # Z
最后得到： master :   A B C D y w x z
也可选择一个提交范围
git cherry-pick my_dev..my_dev~3

git revert ：命令
和cherry-pick 命令大致相同，但它用于给定提交的逆过程，常见用途是“撤销”提交。
假设 master分支  A B C D E F G
git revert  master~3  # commit D 


安装和初始化
git config --global user.name “zhagnsan”
git config --unsert user.name “zhagnsan”
git config --global  user.email  “zhangsan@163.com”
git config -l
cd /path/mydir
git init     or       git init –bare
git clone http://admin@172.168.1.237:8888/r/reborn.git
---建立远程库到本地库的关联
git remote add origin http://admin@172.168.1.237:8888/r/TestGitblit.git   


查看信息
git log
git log –p     ---显示版本间的内容差异
git log -5  
git log –since=“6 hours”   或者  --before=“2 days”
git log -1 head~3    或者 git log -1 head^^^ 
git log <start point> …<end point>
git log -n 3
git log --oneline
git log --stat
git log --shortstat  --oneline
git log --dristat
git log --graph
git blame <some file>
git diff   ----比较暂存区和工作区的文件内容显示信息，暂存区在前，工作区在后
git diff commitid     ----比较工作区和版本库之间的区别


分支操作
git branch                         --- 显示本地分支列表
git branch   <branchname >                       --- 基于当前头指针创建分支
git branch   -D  <branchname >                 --- 强制删除分支
git checkout master
git checkout -b  <branchname>  <start-pint>      ---创建并切换分支
git checkout -b dev origin/dev    --- 从远程orig/dev 分支建立本地dev分支
git branch   -M  <oldbranch>  <newbranch>  --- 重命名分支
git merge branch1     ---将分支branch1 合并到master
git remote prune origin   -----删除掉不存在的远程库分支信息
git pull origin dev:dev    -----在本地建立远程库上的分支
git show-ref   ---查看全部本地引用


远程版本库操作
git branch -r     --- 显示远程分支列表
git clone http://admin@172.168.1.237:8888/r/reborn.git
git clone --depth 200 <some repository>
git remote add origin http://admin@172.168.1.237:8888/r/reborn.git   ----取别名
git branch <newbranchname> <remote branch>  ----基于远程分支创建本地分支
git fetch    ---- 从别名为origin的远程版本库中获取修改，但不合并到本地分支
git fetch <remote repository>
git pull
git pull <remote repository>  ----从远程版本库中获取修改，并合并到本地分支
git push   ---- 把修改推送到别名为origin的远程版本库同名分支
git push <remote repository>  <local branch>   ---- 把修改推送到远程同名分支
git push <remote repository>  <local branch>:<remote branch>
---- 把修改从本地分支推送到远程版本库的分支
git push <remote repository>   :<remote branch>   ----删除远程版本库中的分支
git remote -v   -----查看远程库信息 
git remote prune  <remote repository>     ----- 删除掉不存在的远程库分支信息
git remote rm <remote repository>   ---- 在本地库中删除远程库简称及远程库分支
git remote show [remote-name] 查看某个远程仓库的详细信息
git remote show origin

使用git在本地新建一个分支后，需要做远程分支关联。如果没有关联，git会在下面的操作中提示你显示的添加关联。
关联目的是在执行git pull, git push操作时就不需要指定对应的远程分支，你只要没有显示指定，git pull的时候，就会提示你。
git branch --set-upstream-to=origin/remote_branch  your_branch
其中，origin/remote_branch是你本地分支对应的远程分支；your_branch是你当前的本地分支。 



执行git reset --hard head后工作区的文件丢失找回
find .git/objects -type f | xargs ls -lt | sed 30q    ----- 最近30次的文件
git cat-file -p ID > filename.txt                          ----- 是下述例子中74去掉/后和后面的字符串组合成的字符串

$ find .git/objects -type f | xargs ls -lt | sed 5q
-r--r--r-- 1 shenyipeng 1049089  47019 Feb 19 09:03 .git/objects/74/52305b3c75c253891cec4b8df9f6f963392c6f
git cat-file -p  7452305b3c75c253891cec4b8df9f6f963392c6f > jc.txt


git stash             ----保存目前工作区内容
git stash list       ----显示保存工作的列表
git stash pop     ----弹出目前保存的内容
git stash apply stash@{1}
git stash clear    -----删除进度列表



《Git版本控制管理》
更改提交的相关命令
checkout：切换到不同分支，当前分支和HEAD引用会变为匹配给定分支的头。
reset：此命令不会改变分支，如果提供一个分支名，它会改变当前工作目录的状态，使其看起来像给定分支的头，换言之，
          它会重置当前分支的HEAD引用。但不会改变当前分支。
revert：命令用于全部提交，而不是文件。

变基提交
git rebase 命令：用来改变一串提交以什么为基础。此命令至少需要  提交将迁往的分支名。默认情况下，不在目标分支
中的当前分支的提交会变基。下述中，目标分支是master。 即：变基当前分支的提交到目标分支， 紧挨rebase后的分支。
假设 master分支  A B C D E
假设 topic分支     A B W X Y Z
git checkout topic
git rebase master  
或者
git reabse master topic
会变为：A B C D E w x y z

快进与非快进
远程库   .... A   B ,克隆到本地后进行了 C  D提交，push时如果远程库没有其它提交，
则合并为 .... A  B   C   D 这种称为快进操作。
快进：本质上是一个简单的线性历史记录推进操作。
非快进操作：Origin的历史记录不会简单地从B快进。
如果别人已经在远程库进行了 X Y 提交，
则不能简单的进行直接提交。要么覆盖别人的提交 X Y,这时可以用git push -f 提交进行覆盖。
一般情况下，应该合并这两个交替的历史记录，但两个历史记录都必须存在于一个版本库
中的两个不同分支上，所以应该首先进行fetch操作到本地远程追踪分支，从而在本地形成两个不同
的分支再合并。
git fetch            ---- 将远程分支的 X Y提交获取到本地形成 origin/master 分支
git merge origin/master     ---- 将追踪远程分支合并到本地 master分支
然后再将合并后的推送到远程库：
git push